// Generated by: gen
// TypeWriter: slice
// Directive: +gen on Permission

package entity

import "errors"

// PermissionSlice is a slice of type Permission. Use it where you would use []Permission.
type PermissionSlice []Permission

// Where returns a new PermissionSlice whose elements return true for func. See: http://clipperhouse.github.io/gen/#Where
func (rcv PermissionSlice) Where(fn func(Permission) bool) (result PermissionSlice) {
	for _, v := range rcv {
		if fn(v) {
			result = append(result, v)
		}
	}
	return result
}

// All verifies that all elements of PermissionSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#All
func (rcv PermissionSlice) All(fn func(Permission) bool) bool {
	for _, v := range rcv {
		if !fn(v) {
			return false
		}
	}
	return true
}

// Any verifies that one or more elements of PermissionSlice return true for the passed func. See: http://clipperhouse.github.io/gen/#Any
func (rcv PermissionSlice) Any(fn func(Permission) bool) bool {
	for _, v := range rcv {
		if fn(v) {
			return true
		}
	}
	return false
}

// First returns the first element that returns true for the passed func. Returns error if no elements return true. See: http://clipperhouse.github.io/gen/#First
func (rcv PermissionSlice) First(fn func(Permission) bool) (result Permission, err error) {
	for _, v := range rcv {
		if fn(v) {
			result = v
			return
		}
	}
	err = errors.New("no PermissionSlice elements return true for passed func")
	return
}
